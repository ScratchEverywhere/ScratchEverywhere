# WII MAKEFILE

#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPPC)),)
$(error "Please set DEVKITPPC in your environment. export DEVKITPPC=<path to>devkitPPC")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPPC)/wii_rules

PKGCONF_WII	:=	$(DEVKITPRO)/portlibs/wii/bin/powerpc-eabi-pkg-config

#---------------------------------------------------------------------------------
# Application info
#---------------------------------------------------------------------------------
APP_TITLE	:= Scratch Everywhere!
APP_AUTHOR	:= NateXS
APP_SHORT_DESCRIPTION := Play Scratch games on the Wii!
APP_LONG_DESCRIPTION	:= A custom Runtime that allows you to play any Scratch 3 project on your Wii!
RELEASE_DATE	:= 20251019000000
APP_VERSION	:= 0.26

#---------------------------------------------------------------------------------
# Build info
#---------------------------------------------------------------------------------
TARGET		:=	scratch-wii
BUILD		:=	build/wii
SOURCES		:=	source source/scratch source/scratch/blocks source/scratch/menus source/sdl source/sdl/audio include/miniz include/nlohmann
DATA		:=	data
INCLUDES	:=	include source/scratch source/scratch/blocks source/scratch/menus source/sdl source/sdl/audio include/nlohmann
ROMFS		:=	romfs
GRAPHICS	:=	gfx
GFXBUILD	:=	$(ROMFS)/gfx

# Config Options
ENABLE_CLOUDVARS	?=	0
ENABLE_LOADSCREEN		?=	1
ENABLE_AUDIO	?=	1

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
CFLAGS	:=	`$(PREFIX)pkg-config --cflags sdl2 SDL2_ttf SDL2_image SDL2_gfx freetype2` -g -O2 -Wall $(MACHDEP) $(INCLUDE) -DWII -D__OGC__ -DSDL_BUILD -DCONSOLE -DMOUSE_INPUT

ifeq ($(ENABLE_AUDIO),1)
LIBS	:=	`$(PREFIX)pkg-config --libs sdl2 SDL2_ttf SDL2_mixer SDL2_image SDL2_gfx freetype2`
CFLAGS	+=	-DENABLE_AUDIO `pkg-config --cflags SDL2_mixer`
else
LIBS	:=	`$(PREFIX)pkg-config --libs sdl2 SDL2_ttf SDL2_image SDL2_gfx freetype2`
endif

ASFLAGS	:=	-g $(ARCH)

LDFLAGS	:=	-g $(MACHDEP) -Wl,-Map,$(notdir $*.map) \
		-Wl,--gc-sections


ifeq ($(ENABLE_LOADSCREEN),1)
CFLAGS	+=	-DENABLE_LOADSCREEN
endif

CXXFLAGS	:=	$(CFLAGS) -fno-rtti -std=c++17 -fexceptions

# Include libromfs-wii support
include $(DEVKITPRO)/portlibs/wii/share/romfs-ogc.mk

CFLAGS		+=	$(ROMFS_CFLAGS)
CXXFLAGS	+=	$(ROMFS_CFLAGS)
LIBS		+=	$(ROMFS_LIBS)

#---------------------------------------------------------------------------------
ifneq ($(notdir $(BUILD)),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(BUILD)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
sFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.S)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))
TPLFILES	:=	$(SCFFILES:.scf=.tpl)

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES_SOURCES	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(sFILES:.s=.o) $(SFILES:.S=.o)

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES)) $(addsuffix .o,$(TPLFILES))

# Add ROMFS object files
export OFILES		:=	$(OFILES_BIN) $(OFILES_SOURCES) $(ROMFS_TARGET)

export HFILES		:=	$(addsuffix .h,$(subst .,_,$(BINFILES))) \
			$(addsuffix .h,$(subst .,_,$(TPLFILES)))

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			-I$(CURDIR)/$(BUILD) \
			-I$(LIBOGC_INC)

export LIBPATHS	:= -L$(LIBOGC_LIB)

.PHONY: all clean run package

#---------------------------------------------------------------------------------
all: $(BUILD) $(DEPSDIR) $(GFXBUILD)
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/make/Makefile_wii

$(BUILD):
	@mkdir -p $@

$(GFXBUILD):
	@mkdir -p $@
	@cp -r $(GRAPHICS)/* $@/

ifneq ($(DEPSDIR),$(BUILD))
$(DEPSDIR):
	@mkdir -p $@
endif

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr build $(TARGET).dol $(TARGET).elf $(BUILD)/$(TARGET).zip $(GFXBUILD)

#---------------------------------------------------------------------------------
run: $(BUILD)
	wiiload $(OUTPUT).dol

#---------------------------------------------------------------------------------
else

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
$(OUTPUT).dol: $(OUTPUT).elf

$(OFILES_SOURCES): $(HFILES)

$(OUTPUT).elf: $(OFILES)

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	%_bin.h: %.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

#---------------------------------------------------------------------------------
%.tpl.o	%_tpl.h: %.tpl
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPSDIR)/*.d

#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
# Package target - creates a zip file for distribution
#---------------------------------------------------------------------------------
package: all
	@echo Packaging...
	@rm -rf package
	@mkdir -p package/apps/$(TARGET)
	@cp $(BUILD)/$(TARGET).dol package/apps/$(TARGET)/boot.dol
	@echo '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' > package/apps/$(TARGET)/meta.xml
	@echo '<app version="$(APP_VERSION)">' >> package/apps/$(TARGET)/meta.xml
	@echo '	<name>$(APP_TITLE)</name>' >> package/apps/$(TARGET)/meta.xml
	@echo '	<coder>$(APP_AUTHOR)</coder>' >> package/apps/$(TARGET)/meta.xml
	@echo '	<version>$(APP_VERSION)</version>' >> package/apps/$(TARGET)/meta.xml
	@echo '	<release_date>$(RELEASE_DATE)</release_date>' >> package/apps/$(TARGET)/meta.xml
	@echo '	<short_description>$(APP_SHORT_DESCRIPTION)</short_description>' >> package/apps/$(TARGET)/meta.xml
	@echo '	<long_description>$(APP_LONG_DESCRIPTION)</long_description>' >> package/apps/$(TARGET)/meta.xml
	@echo '</app>' >> package/apps/$(TARGET)/meta.xml
	@if [ -f gfx/wii/icon.png ]; then cp gfx/wii/icon.png package/apps/$(TARGET)/icon.png; fi
	@cd package && zip -r ../$(BUILD)/$(TARGET).zip apps/
	@rm -rf package
	@echo Package created: $(BUILD)/$(TARGET).zip
