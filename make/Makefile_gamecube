# GAMECUBE MAKEFILE

#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPPC)),)
$(error "Please set DEVKITPPC in your environment. export DEVKITPPC=<path to>devkitPPC")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPPC)/gamecube_rules

PKGCONF_GAMECUBE	:=	$(DEVKITPRO)/portlibs/gamecube/bin/powerpc-eabi-pkg-config

#---------------------------------------------------------------------------------
# Application info
#---------------------------------------------------------------------------------
TARGET		:=	scratch-gamecube
BUILD		:=	build/gamecube
SOURCES		:=	source source/scratch source/scratch/blocks source/scratch/menus source/sdl source/sdl/audio include/miniz include/nlohmann
DATA		:=	data
INCLUDES	:=	include source/scratch source/scratch/blocks source/scratch/menus source/sdl source/sdl/audio include/nlohmann
ROMFS		:=	romfs
GRAPHICS	:=	gfx
GFXBUILD	:=	$(ROMFS)/gfx

# Config Options
ENABLE_CLOUDVARS	?=	0
ENABLE_LOADSCREEN		?=	1
ENABLE_AUDIO	?=	1

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
CFLAGS	:=	`$(PREFIX)pkg-config --cflags sdl2 SDL2_ttf SDL2_image SDL2_gfx freetype2` -g -O2 -Wall $(MACHDEP) $(INCLUDE) -DGAMECUBE -D__OGC__ -DSDL_BUILD -DCONSOLE -DMOUSE_INPUT


ASFLAGS	:=	-g $(ARCH)

LDFLAGS	:=	-g $(MACHDEP) -Wl,-Map,$(notdir $*.map) \
		-Wl,--gc-sections

ifeq ($(ENABLE_AUDIO),1)
LIBS	:=	`$(PREFIX)pkg-config --libs sdl2 SDL2_ttf SDL2_mixer SDL2_image SDL2_gfx freetype2`
CFLAGS	+=	-DENABLE_AUDIO `$(PREFIX)pkg-config --cflags SDL2_mixer`
else
LIBS	:=	`$(PREFIX)pkg-config --libs sdl2 SDL2_ttf SDL2_image SDL2_gfx freetype2`
endif

ifeq ($(ENABLE_LOADSCREEN),1)
CFLAGS	+=	-DENABLE_LOADSCREEN
endif

CXXFLAGS	:=	$(CFLAGS) -fno-rtti -std=c++17 -fexceptions

# Include libromfs-ogc support
include $(DEVKITPRO)/portlibs/gamecube/share/romfs-ogc.mk

CFLAGS		+=	$(ROMFS_CFLAGS)
CXXFLAGS	+=	$(ROMFS_CFLAGS)
LIBS		+=	$(ROMFS_LIBS)

#---------------------------------------------------------------------------------
ifneq ($(notdir $(BUILD)),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(BUILD)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
sFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.S)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES_SOURCES	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(sFILES:.s=.o) $(SFILES:.S=.o)

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))

# Add ROMFS object files
export OFILES		:=	$(OFILES_BIN) $(OFILES_SOURCES) $(ROMFS_TARGET)

export HFILES		:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			-I$(CURDIR)/$(BUILD) \
			-I$(LIBOGC_INC)

export LIBPATHS	:= -L$(LIBOGC_LIB)

.PHONY: all clean run

#---------------------------------------------------------------------------------
all: $(BUILD) $(DEPSDIR) $(GFXBUILD)
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/make/Makefile_gamecube

$(BUILD):
	@mkdir -p $@

$(GFXBUILD):
	@mkdir -p $@
	@cp -r $(GRAPHICS)/* $@/

ifneq ($(DEPSDIR),$(BUILD))
$(DEPSDIR):
	@mkdir -p $@
endif

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr build $(TARGET).dol $(TARGET).elf $(GFXBUILD)

#---------------------------------------------------------------------------------
run: $(BUILD)
	@echo "Built $(OUTPUT).dol"

#---------------------------------------------------------------------------------
else

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
$(OUTPUT).dol: $(OUTPUT).elf

$(OFILES_SOURCES): $(HFILES)

$(OUTPUT).elf: $(OFILES)

#---------------------------------------------------------------------------------
%.bin.o	%_bin.h: %.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPSDIR)/*.d

#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------
