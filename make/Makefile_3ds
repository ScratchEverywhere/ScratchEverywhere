.PHONY: all clean cia


# 3DS MAKEFILE


#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITARM)),)
$(error "Please set DEVKITARM in your environment. export DEVKITARM=<path to>devkitARM")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITARM)/3ds_rules

PKGCONF_3DS	:=	$(DEVKITPRO)/portlibs/3ds/bin/arm-none-eabi-pkg-config

#---------------------------------------------------------------------------------
#	Application Info
#---------------------------------------------------------------------------------
APP_TITLE 	:=	Scratch Everywhere!
APP_DESCRIPTION := Scratch 3 Games on the 3DS!
APP_AUTHOR 	:= NateXS
TARGET		:=	scratch-3ds

# CIA / banner assets (for makerom & bannertool)
BANNER_PNG 	:= $(TOPDIR)/gfx/3ds/banner.png
BANNER_WAV 	:= $(TOPDIR)/gfx/3ds/banner.wav
ICON_PNG   	:= $(TOPDIR)/gfx/icon.png
RSF_FILE   	:= $(TOPDIR)/gfx/3ds/makerom.rsf

# External tools (override if needed)
BANNERTOOL ?= bannertool
MAKEROM    ?= makerom
#---------------------------------------------------------------------------------
#	Build Info
#---------------------------------------------------------------------------------
BUILD		:=	build/3ds
SOURCES		:=	source source/3ds source/scratch source/scratch/blocks source/scratch/menus include/miniz source/sdl/audio
DATA		:=	data
INCLUDES	:=	source include source/3ds source/scratch source/scratch/blocks source/scratch/menus source/sdl/audio
GRAPHICS	:=	gfx
ROMFS		:=	romfs
ICON		:=	gfx/icon.png
GFXBUILD	:=	$(ROMFS)/gfx

# Config Options
ENABLE_CLOUDVARS	?=	0
ENABLE_LOADSCREEN	  ?=	1
ENABLE_AUDIO	?=	1
RAM_AMOUNT		?= 72

# Check for SDL2 libraries
ifeq ($(ENABLE_AUDIO),1)
SDL2_AVAILABLE := $(shell $(PKGCONF_3DS) --exists sdl2 >/dev/null 2>&1; echo $$?)
SDL2_MIXER_AVAILABLE := $(shell $(PKGCONF_3DS) --exists SDL2_mixer >/dev/null 2>&1; echo $$?)

ifeq ($(SDL2_AVAILABLE),1)
SDL2_AVAILABLE := $(shell test -f $(DEVKITPRO)/portlibs/3ds/lib/libSDL2.a; echo $$?)
endif
ifeq ($(SDL2_MIXER_AVAILABLE),1)
SDL2_MIXER_AVAILABLE := $(shell test -f $(DEVKITPRO)/portlibs/3ds/lib/libSDL2_mixer.a; echo $$?)
endif

# Disable audio if SDL2 isnt found
ifneq ($(SDL2_AVAILABLE),0)
$(warning "[WARNING] SDL2 not found - Disabling audio...")
override ENABLE_AUDIO := 0
else ifneq ($(SDL2_MIXER_AVAILABLE),0)
$(warning "[WARNING] SDL2_mixer not found - Disabling audio...") 
override ENABLE_AUDIO := 0
endif
endif

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH	:=	-march=armv6k -mtune=mpcore -mfloat-abi=hard -mtp=soft 

CFLAGS	:=	-g -Wall -O2 -mword-relocations \
			-ffunction-sections \
			$(ARCH)

CFLAGS	+=	$(INCLUDE) -D__3DS__ -fomit-frame-pointer

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=3dsx.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

ifeq ($(ENABLE_AUDIO),1)
LIBS	+=	-lSDL2_mixer -lSDL2
CFLAGS	+=	-DENABLE_AUDIO
endif

LIBS	+=	-lcitro2d -lcitro3d -lctru -lm

ifeq ($(ENABLE_LOADSCREEN),1)
CFLAGS	+=	-DENABLE_LOADSCREEN
endif
ifeq ($(ENABLE_CLOUDVARS),1)
CFLAGS	+=	-DENABLE_CLOUDVARS `$(PKGCONF_3DS) --cflags mist++`
LIBS	  += `$(PKGCONF_3DS) --libs mist++`

# Mist++ Version Check
ifeq ($(shell $(PKGCONF_3DS) --atleast-version=0.2.0 mist++ >/dev/null 2>&1; echo $$?),1)
$(error "[ERROR] Mist++ must be v0.2.0 or newer.")
endif
endif

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=3dsx.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

CXXFLAGS	:= $(CFLAGS) -fno-rtti -Wno-psabi -std=c++17 -fexceptions

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(CTRULIB)  $(DEVKITPRO)/portlibs/3ds


#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
# Find images in romfs/project and generate t3s files for them
#---------------------------------------------------------------------------------
ROMFS_PROJECT_IMAGES := $(shell find $(ROMFS)/project -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.bmp" -o -iname "*.tga" \) 2>/dev/null)

#---------------------------------------------------------------------------------
ifneq ($(notdir $(BUILD)),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(BUILD)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(GRAPHICS),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
PICAFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.v.pica)))
SHLISTFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.shlist)))
GFXFILES	:=	$(foreach dir,$(GRAPHICS),$(notdir $(wildcard $(dir)/*.t3s)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

ALLGFXFILES	:=	$(foreach dir,$(GRAPHICS),$(notdir $(wildcard $(dir)/*.*)))

# Add romfs project t3s files
ROMFS_PROJECT_T3X_STEMS := $(patsubst %.png,%.t3x,$(ROMFS_PROJECT_IMAGES))
ROMFS_PROJECT_T3X_STEMS := $(patsubst %.jpg,%.t3x,$(ROMFS_PROJECT_T3X_STEMS))
ROMFS_PROJECT_T3X_STEMS := $(patsubst %.jpeg,%.t3x,$(ROMFS_PROJECT_T3X_STEMS))
ROMFS_PROJECT_T3X_STEMS := $(patsubst %.bmp,%.t3x,$(ROMFS_PROJECT_T3X_STEMS))
ROMFS_PROJECT_T3X_STEMS := $(patsubst %.tga,%.t3x,$(ROMFS_PROJECT_T3X_STEMS))
ROMFS_PROJECT_T3XFILES := $(patsubst $(ROMFS)/project/%,$(GFXBUILD)/%,$(ROMFS_PROJECT_T3X_STEMS))

FONTFILES := $(shell find $(GRAPHICS) -type f -iname "*.ttf" 2>/dev/null)
ROMFS_FONTFILES := $(patsubst $(GRAPHICS)/%,$(GFXBUILD)/%,$(FONTFILES:.ttf=.bcfnt))


#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
ifeq ($(GFXBUILD),$(BUILD))
#---------------------------------------------------------------------------------
export T3XFILES :=  $(GFXFILES:.t3s=.t3x)
export ROMFS_ALLGFXFILES	:=	$(ALLGFXFILES)
export EFONTFILES := $(FONTFILES:.ttf=.bcfnt)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
export ROMFS_T3XFILES	:=	$(patsubst %.t3s, $(GFXBUILD)/%.t3x, $(GFXFILES)) $(ROMFS_PROJECT_T3XFILES)
export ROMFS_ALLGFXFILES	:=	$(patsubst %, $(GFXBUILD)/%, $(ALLGFXFILES))
export T3XHFILES		:=	$(patsubst %.t3s, $(BUILD)/%.h, $(GFXFILES))
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES_SOURCES 	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES)) \
			$(PICAFILES:.v.pica=.shbin.o) $(SHLISTFILES:.shlist=.shbin.o) \
			$(addsuffix .o,$(T3XFILES))

export OFILES := $(OFILES_BIN) $(OFILES_SOURCES)

export HFILES	:=	$(PICAFILES:.v.pica=_shbin.h) $(SHLISTFILES:.shlist=_shbin.h) \
			$(addsuffix .h,$(subst .,_,$(BINFILES))) \
			$(GFXFILES:.t3s=.h)

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

export _3DSXDEPS	:=	$(if $(NO_SMDH),,$(OUTPUT).smdh)

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.png)
	ifneq (,$(findstring $(TARGET).png,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).png
	else
		ifneq (,$(findstring icon.png,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.png
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_SMDH)),)
	export _3DSXFLAGS += --smdh=$(CURDIR)/$(BUILD)/$(TARGET).smdh
endif

ifneq ($(ROMFS),)
	export _3DSXFLAGS += --romfs=$(CURDIR)/$(ROMFS)
endif

.PHONY: all clean

#---------------------------------------------------------------------------------
all: $(BUILD) $(GFXBUILD) $(DEPSDIR) $(ROMFS_T3XFILES) $(ROMFS_FONTFILES) $(T3XHFILES)
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(TOPDIR)/make/Makefile_3ds all

cia: $(BUILD) $(GFXBUILD) $(DEPSDIR) $(ROMFS_T3XFILES) $(ROMFS_FONTFILES) $(T3XHFILES)
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(TOPDIR)/make/Makefile_3ds cia

$(BUILD):
	@mkdir -p $@

ifneq ($(GFXBUILD),$(BUILD))
$(GFXBUILD):
	@mkdir -p $@
	@cp -r $(GRAPHICS)/* $@/
endif

ifneq ($(DEPSDIR),$(BUILD))
$(DEPSDIR):
	@mkdir -p $@
endif

#---------------------------------------------------------------------------------
# Generate .t3s files from images in romfs/project
#---------------------------------------------------------------------------------
$(ROMFS)/project/%.t3s: $(ROMFS)/project/%.png
	@echo "Generating $(notdir $@) from $(notdir $<)"
	@echo "-f auto-etc1 -z auto \"$(notdir $<)\"" > $@

$(ROMFS)/project/%.t3s: $(ROMFS)/project/%.jpg
	@echo "Generating $(notdir $@) from $(notdir $<)"
	@echo "-f auto-etc1 -z auto \"$(notdir $<)\"" > $@

$(ROMFS)/project/%.t3s: $(ROMFS)/project/%.jpeg
	@echo "Generating $(notdir $@) from $(notdir $<)"
	@echo "-f auto-etc1 -z auto \"$(notdir $<)\"" > $@

$(ROMFS)/project/%.t3s: $(ROMFS)/project/%.bmp
	@echo "Generating $(notdir $@) from $(notdir $<)"
	@echo "-f auto-etc1 -z auto \"$(notdir $<)\"" > $@

$(ROMFS)/project/%.t3s: $(ROMFS)/project/%.tga
	@echo "Generating $(notdir $@) from $(notdir $<)"
	@echo "-f auto-etc1 -z auto \"$(notdir $<)\"" > $@

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr build $(BUILD)/$(TARGET).3dsx $(BUILD)/$(TARGET).cia $(BUILD)/$(TARGET).smdh $(BUILD)/$(TARGET).elf $(GFXBUILD) \
		$(BUILD)/banner.bnr $(BUILD)/icon.smdh
	@find $(ROMFS)/project -name "*.t3s" -delete 2>/dev/null || true

#---------------------------------------------------------------------------------
$(GFXBUILD)/%.t3x	$(BUILD)/%.h	:	%.t3s
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@tex3ds -i $< -H $(BUILD)/$*.h -d $(DEPSDIR)/$*.d -o $(GFXBUILD)/$*.t3x

#---------------------------------------------------------------------------------
# Generate t3x files from t3s files in romfs/project
#---------------------------------------------------------------------------------
$(GFXBUILD)/%.t3x: $(ROMFS)/project/%.t3s
	@echo "Processing image: $(notdir $<)"
	@mkdir -p $(dir $@)
	@tex3ds -i $< -o $@
	@rm $<

#---------------------------------------------------------------------------------
# Generate bcfnt files from .ttf
#---------------------------------------------------------------------------------
$(GFXBUILD)/%.bcfnt : $(GRAPHICS)/%.ttf
	@echo "Converting font: $(notdir $<)"
	@mkdir -p $(dir $@)
	@mkbcfnt -o $@ $<

#---------------------------------------------------------------------------------
# Copy all files from gfx folder to romfs/gfx folder
$(GFXBUILD)/%	:	gfx/%
#---------------------------------------------------------------------------------
	@mkdir -p $(dir $@)
	@cp $< $@

#---------------------------------------------------------------------------------
else

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
.PHONY: all cia

# Only build .3dsx by default; CIA via explicit target
all: $(OUTPUT).3dsx $(OUTPUT).cia


$(OUTPUT).3dsx	:	$(OUTPUT).elf $(_3DSXDEPS)

$(OFILES_SOURCES) : $(HFILES)

$(OUTPUT).elf	:	$(OFILES)

#---------------------------------------------------------------------------------
# CIA build (makerom + bannertool)
#---------------------------------------------------------------------------------
banner.bnr: $(BANNER_PNG) $(BANNER_WAV)
	@$(BANNERTOOL) makebanner -i $(BANNER_PNG) -a $(BANNER_WAV) -o $@
	@echo "built ... $@"

icon.smdh: $(ICON_PNG)
	@$(BANNERTOOL) makesmdh -s "$(APP_TITLE)" -l "$(APP_DESCRIPTION)" -p "$(APP_AUTHOR)" -i $(ICON_PNG) -o $@
	@echo "built ... $@"

$(OUTPUT).cia: $(OUTPUT).elf banner.bnr icon.smdh $(RSF_FILE)
	@echo "Setting RAM to $(RAM_AMOUNT) MB..."
	@sed -i '/# Process Settings/,/# New3DS Exclusive Process Settings/ s/SystemMode.*: .*/SystemMode                    : $(RAM_AMOUNT)MB # 64MB(Default)\/96MB\/80MB\/72MB\/32MB/' $(RSF_FILE)
	@$(MAKEROM) -f cia -o $@ -elf $(OUTPUT).elf -rsf $(RSF_FILE) -banner banner.bnr -icon icon.smdh -target t -exefslogo
	@echo "built ... $@"

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	%_bin.h :	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

#---------------------------------------------------------------------------------
.PRECIOUS : %.t3x %.shbin %.bcfnt
#---------------------------------------------------------------------------------
%.t3x.o	%_t3x.h :	%.t3x
#---------------------------------------------------------------------------------
	$(SILENTMSG) $(notdir $<)
	$(bin2o)

#---------------------------------------------------------------------------------
%.bcfnt.o %_bcfnt.h : %.bcfnt
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

#---------------------------------------------------------------------------------
%.shbin.o %_shbin.h : %.shbin
#---------------------------------------------------------------------------------
	$(SILENTMSG) $(notdir $<)
	$(bin2o)

-include $(DEPSDIR)/*.d

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------