.SUFFIXES:
ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)

PKGCONF				:=	/opt/devkitpro/portlibs/ppc/bin/powerpc-eabi-pkg-config
PKGCONF_WIIU	:=	/opt/devkitpro/portlibs/wiiu/bin/powerpc-eabi-pkg-config

# Build Info

TARGET		:=	scratch-wiiu
BUILD			:=	build/wiiu
SOURCES		:=	source source/scratch source/scratch/blocks source/scratch/menus source/sdl source/sdl/audio include/miniz include/nlohmann
INCLUDES	:=	include source/scratch source/scratch/blocks source/scratch/menus source/sdl source/sdl/audio include/nlohmann
ROMFS	:=	romfs
GRAPHICS	:=	gfx
GFXBUILD	:=	$(ROMFS)/gfx

# App Info

APP_NAME							:=	Scratch Everywhere!
APP_AUTHOR						:=	NateXS and Grady Link
APP_SHORT_DESCRIPTION	:=	Play Scratch Games on the Wii U!
APP_LONG_DESCRIPTION	:=	$(APP_SHORT_DESCRIPTION)
APP_VERSION						:=	0.25
APP_ICON							:=	gfx/wiiu/icon.png
APP_TV_SPLASH					:=	gfx/wiiu/tv-splash.png
APP_DRC_SPLASH				:=	gfx/wiiu/drc-splash.png

include $(DEVKITPRO)/wut/share/wut_rules

# Config Options
ENABLE_CLOUDVARS	?=	0
ENABLE_AUDIO	?=	1
ENABLE_LOADSCREEN	?=	1

# Flags

CFLAGS	:=	-g -Wall -O2 -Wno-format-truncation -ffunction-sections -ffast-math $(MACHDEP) -DSDL_BUILD

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) $(foreach dir,$(LIBDIRS),-I$(dir)/include) -I$(CURDIR)/$(BUILD)

CFLAGS	+=	$(INCLUDE) -D__WIIU__ -D__WUT__ -DSDL_BUILD
CFLAGS	+=	`$(PKGCONF_WIIU) --cflags SDL2_image SDL2_ttf SDL2_gfx sdl2`
CFLAGS	+=	-I$(DEVKITPRO)/wut/include

ASFLAGS	:=	-g $(MACHDEP)
LDFLAGS	:=	-g $(MACHDEP) $(RPXSPECS) -Wl,-Map,$(notdir $*.map)

ifeq ($(ENABLE_AUDIO),1)
CFLAGS	+=	-DENABLE_AUDIO `$(PKGCONF_WIIU) --cflags SDL2_mixer`
LIBS	:=	`$(PKGCONF_WIIU) --libs SDL2_image SDL2_ttf SDL2_mixer SDL2_gfx sdl2` `$(PKGCONF) --libs zlib libpng`
else
LIBS	:=	`$(PKGCONF_WIIU) --libs SDL2_image SDL2_ttf SDL2_gfx sdl2` `$(PKGCONF) --libs zlib libpng`
endif

LIBS	+=	-lharfbuzz -lfreetype

ifeq ($(ENABLE_CLOUDVARS),1)
CFLAGS	+=	-DENABLE_CLOUDVARS `$(PKGCONF_WIIU) --cflags mist++`
LIBS		+=	`$(PKGCONF_WIIU) --libs mist++`

# Mist++ Version Check
ifeq ($(shell $(PKGCONF_WIIU) --atleast-version=0.2.0 mist++ >/dev/null 2>&1; echo $$?),1)
$(error "[ERROR] Mist++ must be v0.2.0 or newer.")
endif
endif

ifeq ($(ENABLE_LOADSCREEN),1)
CFLAGS	+=	-DENABLE_LOADSCREEN
endif

CXXFLAGS	:=	$(CFLAGS) -std=c++17 -Wall -fexceptions

LIBDIRS	:=	$(PORTLIBS) $(WUT_ROOT)

# Compiling

export OUTPUT	:=	$(CURDIR)/$(BUILD)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH		:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir))
export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))

ifeq ($(strip $(CPPFILES)),)
	export LD	:=	$(CC)
else
  export LD	:=	$(CXX)
endif

export SRCFILES	:=	$(CPPFILES) $(CFILES) $(SFILES)
export OFILES		:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)
export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

include $(PORTLIBS_PATH)/wiiu/share/romfs-wiiu.mk

CFLAGS		+=	$(ROMFS_CFLAGS)
CXXFLAGS	+=	$(ROMFS_CFLAGS)
LIBS			+=	$(ROMFS_LIBS)
OFILES		+=	$(ROMFS_TARGET)

.PHONY: $(BUILD) clean all

all: mkdir $(GFXBUILD) $(OUTPUT).wuhb package 

mkdir:
	@mkdir -p $(BUILD)

$(GFXBUILD):
	@mkdir -p $@
	@cp -r $(GRAPHICS)/* $@/

test:
	cemu -g $(OUTPUT).rpx

clean:
	@echo Cleaning...
	@rm -rf $(BUILD) $(GFXBUILD)

package:
	@echo Packaging...
	@mkdir -p $(OUTPUT)
	@cp -t $(OUTPUT) $(OUTPUT).wuhb $(OUTPUT).rpx
	@cp gfx/wiiu/hbl-icon.png $(OUTPUT)/icon.png
	@echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\
	<app version=\"1\">\
		<name>$(APP_NAME)</name>\
		<coder>$(APP_AUTHOR)</coder>\
		<version>$(APP_VERSION)</version>\
		<release_date>$$(date +"%Y%m%d%H%M%S")</release_date>\
		<short_description>$(APP_SHORT_DESCRIPTION)</short_description>\
		<long_description>$(APP_LONG_DESCRIPTION)</long_description>\
	</app>" > $(OUTPUT)/meta.xml
#	@python3 metagen.py --name "$(APP_NAME)" --author "$(APP_AUTHOR)" --version "Beta 5" --short-description="$(APP_SHORT_DESCRIPTION)" --long-description="$(APP_LONG_DESCRIPTION)" --output $(OUTPUT)/meta.xml

DEPENDS	:=	$(OFILES:.o=.d)

$(OUTPUT).elf: $(addprefix $(BUILD)/,$(OFILES))
	$(LD) $(LDFLAGS) $(addprefix $(BUILD)/,$(OFILES)) $(LIBS) $(LIBPATHS) -o $@

$(BUILD)/%.o: %.cpp
	@echo "Compiling $< ..."
	@mkdir -p $(@D)
	@$(CXX) $(CXXFLAGS) -MMD -o $@ -c $<

$(BUILD)/%.o: %.c
	@echo "Compiling $< ..."
	@mkdir -p $(@D)
	@$(CC) $(CFLAGS) -MMD -o $@ -c $<

$(BUILD)/%.o: %.s
	@echo "Assembling $< ..."
	@mkdir -p $(@D)
	@$(AS) $(ASFLAGS) -o $@ -c $<

-include $(DEPENDS)
